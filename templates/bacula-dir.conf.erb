# DO NOT EDIT - Managed by Puppet
#
# Bacula Director Master Configuration
#   for <%= @director_server_real %>

# Define the name of this director so other clients can
# connect to it and work with our system
Director {
  Name = "<%= @director_server_real -%>:director"
  Query File = "/etc/bacula/scripts/query.sql"
  Working Directory = "/var/lib/bacula"
  PID Directory = "/var/run/bacula"
<% if @plugin_dir -%>
  Plugin Directory = <%= @plugin_dir %>
<% end -%>
  Maximum Concurrent Jobs = 20
  Password = "<%= @director_password -%>"
  Messages = "<%= @director_server_real -%>:messages:daemon"
<% if @use_tls -%>
  TLS Enable = yes
  TLS Require = <%= @tls_require %>
  TLS Verify Peer = <%= @tls_verify_peer %>
<% @tls_allowed_cn.each do |allowed_cn| -%>
  TLS Allowed CN = "<%= allowed_cn %>"
<% end -%>
<% if @tls_ca_cert -%>
  TLS CA Certificate File = <%= @tls_ca_cert %>
<% end -%>
<% if @tls_ca_cert_dir -%>
  TLS CA Certificate Dir = <%= @tls_ca_cert_dir %>
<% end -%>
  TLS Certificate = <%= @tls_cert %>
  TLS Key = <%= @tls_key %>
<% end -%>
}

# This is where the catalog information will be stored (basically
# this should be how to connect to whatever database we're using)
Catalog {
  Name = "<%= @director_server_real -%>:<%= @db_backend -%>"
  dbname = "<%= @db_database -%>"; dbdriver = dbi:<%= @db_backend %>
  <% if @db_backend == 'mysql' # postgres and sqlite don't require these settings -%>
  dbaddress = <%= @db_host %>; dbport = <%= db_port %>; user = <%= db_user %>; password = <%= db_password %>
  <% end -%>
}

# Configure how the directory will log and/or send messages. This
# should should be for just about everything.
Messages {
  Name = "<%= @director_server_real -%>:messages:standard"
  Mail Command = "<%= @mail_command %>"
  Operator Command = "<%= @operator_command %>"
<% if @mail_to_real -%>
  Mail = <%= @mail_to_real -%> = all, !skipped
<% end -%>
<% if @mail_to_on_error -%>
  Mail On Error = <%= @mail_to_on_error -%> = all, !skipped
<% end -%>
  Operator = <%= @mail_to_operator_real -%> = mount
  Console = all, !skipped, !saved
  # WARNING! the following will create a file that you must cycle from
  #          time to time as it will grow indefinitely. However, it will
  #          also keep all your messages if they scroll off the console.
  Append = "/var/log/bacula/<%= @director_server_real -%>:director.log" = all, !skipped
  Catalog = all
}

# These are messages directly from the various daemons themselves.
Messages {
  Name = "<%= @director_server_real -%>:messages:daemon"
  Mail Command = "/usr/sbin/bsmtp -h localhost -f bacula@<%= scope.lookupvar('::fqdn') -%> -s \"Bacula Notice (from Director %d)\" %r"
  Mail = <%= @mail_to_daemon_real -%> = all, !skipped
  Console = all, !skipped, !saved
  Append = "/var/log/bacula/<%= @director_server_real -%>:director.log" = all, !skipped
}

<% if @use_console -%>
# Restricted console used by tray-monitor to get the status of the director
Console {
  Name = "<%= @director_server_real -%>:monitor:director"
  Password = "<%= console_password -%>"
  CommandACL = status, .status
}
<% end -%>

# DEFAULT STORAGE SERVER ------------------------------------------------------
# All the clients will define their own Storage Daemon configuration as they
# will connect to a dedicated File device on that director (to aid Pool & Volume
# management along with concurrent access). This section will define a default
# Storage Daemon to connect to (using the standard FileStorage device) and a
# Pool which will be used with that as well.
Storage {
  Name = "<%= @storage_server_real -%>:storage:default"
  Address = <%= @storage_server_real %>
  Password = "<%= @director_password -%>"
  Device = "DefaultFileStorage"
  Media Type = File
  Maximum Concurrent Jobs = 20  
<% if @use_tls -%>
  TLS Enable = yes
  TLS Require = <%= @tls_require %>
<% if @tls_ca_cert -%>
  TLS CA Certificate File = <%= @tls_ca_cert %>
<% end -%>
<% if @tls_ca_cert_dir -%>
  TLS CA Certificate Dir = <%= @tls_ca_cert_dir %>
<% end -%>
  TLS Certificate = <%= @tls_cert %>
  TLS Key = <%= @tls_key %>
<% end -%>
}

Pool {
  Name = "<%= @storage_server_real -%>:pool:default"
  # All Volumes will have the format standard.date.time to ensure they
  # are kept unique throughout the operation and also aid quick analysis
  # We won't use a counter format for this at the moment.
  Label Format = "${Job}.${Year}${Month:p/2/0/r}${Day:p/2/0/r}.${Hour:p/2/0/r}${Minute:p/2/0/r}"
  Pool Type = Backup
  # Clean up any we don't need, and keep them for a maximum of a month (in
  # theory the same time period for weekly backups from the clients)
  # Note the files for the old volumes will still remain on the disk but will
  # be truncated to a zero size.
  Recycle = <%= @volume_recycle %>
  Auto Prune = <%= @volume_autoprune %>
  Action On Purge = Truncate
  Volume Retention = <%= @volume_retention %>
  # Don't allow re-use of volumes; one volume per job only
  Maximum Volume Bytes = 100G
  Maximum Volume Jobs = 20
}
Pool {
  Name = "<%= @storage_server_real -%>:pool:default.full"
  # All Volumes will have the format standard.date.time to ensure they
  # are kept unique throughout the operation and also aid quick analysis
  # We won't use a counter format for this at the moment.
  Label Format = "${Job}.full.${Year}${Month:p/2/0/r}${Day:p/2/0/r}.${Hour:p/2/0/r}${Minute:p/2/0/r}"
  Pool Type = Backup
  # Clean up any we don't need, and keep them for a maximum of a year
  # Note the files for the old volumes will still remain on the disk but will
  # be truncated to a zero size.
  Recycle = <%= @volume_recycle %>
  Auto Prune = <%= @volume_autoprune_full %>
  Action On Purge = Truncate
  Volume Retention = <%= @volume_retention_full %>
  # Don't allow re-use of volumes; one volume per job only
  Maximum Volume Bytes = 100G
  Maximum Volume Jobs = 20 
}

Pool {
  Name = "<%= @storage_server_real -%>:pool:default.differential"
  # All Volumes will have the format standard.date.time to ensure they
  # are kept unique throughout the operation and also aid quick analysis
  # We won't use a counter format for this at the moment.
  Label Format = "${Job}.diff.${Year}${Month:p/2/0/r}${Day:p/2/0/r}.${Hour:p/2/0/r}${Minute:p/2/0/r}"
  Pool Type = Backup
  # Clean up any we don't need, and keep them for a maximum of fourty days
  # Note the files for the old volumes will still remain on the disk but will
  # be truncated to a zero size.
  Recycle = <%= @volume_recycle %>
  Auto Prune = <%= @volume_autoprune_diff %>
  Action On Purge = Truncate
  Volume Retention = <%= @volume_retention_diff %>
  # Don't allow re-use of volumes; one volume per job only
  Maximum Volume Bytes = 100G
  Maximum Volume Jobs = 20
}

Pool {
  Name = "<%= @storage_server_real -%>:pool:default.incremental"
  # All Volumes will have the format standard.date.time to ensure they
  # are kept unique throughout the operation and also aid quick analysis
  # We won't use a counter format for this at the moment.
  Label Format = "${Job}.incr.${Year}${Month:p/2/0/r}${Day:p/2/0/r}.${Hour:p/2/0/r}${Minute:p/2/0/r}"
  Pool Type = Backup
  # Clean up any we don't need, and keep them for a maximum of 40 days
  # Note the files for the old volumes will still remain on the disk but will
  # be truncated to a zero size.
  Recycle = <%= @volume_recycle %>
  Auto Prune = <%= @volume_autoprune_incr %>
  Action On Purge = Truncate
  Volume Retention = <%= @volume_retention_incr %>
  # Don't allow re-use of volumes; one volume per job only
  Maximum Volume Bytes = 100G
  Maximum Volume Jobs = 20
}

Pool {
  Name = "<%= @storage_server_real -%>:pool:catalog"
  # All Volumes will have the format director.catalog.date.time to ensure they
  # are kept unique throughout the operation and also aid quick analysis
  Label Format = "${Job}.<%= @director_server_real -%>.${Counter<%= @director_server_real.split('.')[0].capitalize -%>Catalog+:p/3/0/r}"
  Pool Type = Backup
  # Clean up any we don't need, and keep them for a maximum of a month (in
  # theory the same time period for weekly backups from the clients)
  Recycle = Yes
  Auto Prune = Yes
  # We have no limit on the number of volumes, but we will simply set that
  # we should keep at least one weeks worth of backups of the database
  Volume Retention = 1 Week
  # Don't allow re-use of volumes; one volume per job only
  Maximum Volume Jobs = 20
}

# Create a Counter which will be used to label the catalog volumes on the system
Counter {
  Name    = "Counter<%= director_server_real.split('.')[0].capitalize -%>Catalog"
  Minimum = 1
  Catalog = "<%= director_server_real -%>:<%= db_backend %>"
}

# FILE SETS -------------------------------------------------------------------
# Define the standard set of locations which which will be backed up (along
# what within those should not be). In general, we have two types:
#
#   Basic:noHome     This doesn't back up the /home directory as its mounted
#                    from an NFS director on the network (this is the default).
#   Basic:withHome   This one does for servers where we don't mount NFS on it.

FileSet {
  Name = "Basic:noHome"
  Include {
    Options {
      Signature   = SHA1
      Compression = GZIP
    }

    # Don't worry about most of the director as Puppet manages the
    # configuration. Ensure that per-machine state files or settings
    # are backed up, along with stuff from /var or /srv which should be
    # most service-related files
    File = /boot
    File = /etc
    File = /usr/local
    File = /var
    File = /opt
    File = /srv
    # /home will not be backed up on any normal director as it's managed from
    # a central file-server for most servers.
  }

  Exclude {
    # Ignore stuff that can be ignored
    File = /var/cache
    File = /var/tmp
    # The state of the packages installed, or their files, etc.
    # can be ignored as we use puppet to rebuild much of the server
    File = /var/lib/apt
    File = /var/lib/dpkg
    File = /var/lib/puppet
    File = /var/lib/yum
    # Ignore database stuff; this will need to be handled
    # using some sort of a dump script
    File = /var/lib/mysql
    File = /var/lib/postgresql
    File = /var/lib/ldap
    # Bacula's state files are no use to us on restore
    File = /var/lib/bacula
  }
}

FileSet {
  Name = "Basic:withHome"
  Include {
    Options {
      Signature   = SHA1
      Compression = GZIP
    }

    File = /boot
    File = /etc
    File = /usr/local
    File = /var
    File = /opt
    File = /srv
    # This set does include /home
    File = /home
  }

  Exclude {
    File = /var/cache
    File = /var/tmp
    File = /var/lib/apt
    File = /var/lib/dpkg
    File = /var/lib/puppet
    File = /var/lib/mysql
    File = /var/lib/postgresql
    File = /var/lib/ldap
    File = /var/lib/bacula
    File = /var/lib/yum
  }
}

# This set is specifically for Bacula to allow it to backup its own internal
# cataloge as part of the normal process.
FileSet {
  Name = "Catalog"
  Include {
    Options {
      Signature   = SHA1
      Compression = GZIP
    }
    File = "<%= @catalog_dir %>/bacula.sql"
  }
}


# SCHEDULE --------------------------------------------------------------------
# Define when jobs should be run, and what Levels of backups they will be when
# they are run.

# These two are the default backup schedule; don't change them
Schedule {
  Name = "WeeklyCycle"
  Run = Level=Full First Sun at 23:05
  Run = Level=Differential Second-Fifth Sun at 23:05
  Run = Level=Incremental Mon-Sat at 23:05
}

Schedule {
  Name = "WeeklyCycleAfterBackup"
  Run = Level=Full Mon-Sun at 23:10
}

# These cycles are set up so that we can spread out the full backups of our
# servers across the week. Some at the weekend, some mid-week.
Schedule {
  Name = "Weekly:onFriday"
  Run = Level=Full First Fri at 18:30
  Run = Level=Differential Second-Fifth Fri at 18:30
  Run = Level=Incremental Sat-Thu at 20:00
}

Schedule {
  Name = "Weekly:onSaturday"
  # Because this is a weekend job, we'll start the full runs earlier
  Run = Level=Full First Sat at 15:30
  Run = Level=Differential Second-Fifth Sat at 15:30
  Run = Level=Incremental Sun-Fri at 20:00
}

Schedule {
  Name = "Weekly:onSunday"
  # Because this is a weekend job, we'll start the full runs earlier
  Run = Level=Full First Sun at 15:30
  Run = Level=Differential Second-Fifth Sun at 15:30
  Run = Level=Incremental Mon-Sat at 20:00
}

Schedule {
  Name = "Weekly:onMonday"
  Run = Level=Full First Mon at 18:30
  Run = Level=Differential Second-Fifth Mon at 18:30
  Run = Level=Incremental Tue-Sun at 20:00
}

Schedule {
  Name = "Weekly:onTuesday"
  Run = Level=Full First Tue at 18:30
  Run = Level=Differential Second-Fifth Tue at 18:30
  Run = Level=Incremental Wed-Mon at 20:00
}

Schedule {
  Name = "Weekly:onWednesday"
  Run = Level=Full First Wed at 18:30
  Run = Level=Differential Second-Fifth Wed at 18:30
  Run = Level=Incremental Thu-Tue at 20:00
}

Schedule {
  Name = "Weekly:onThursday"
  Run = Level=Full First Thu at 18:30
  Run = Level=Differential Second-Fifth Thu at 18:30
  Run = Level=Incremental Fri-Wed at 20:00
}

Schedule {
  Name = "Hourly"
  Run = Level=Incremental hourly at 0:30
}

# JOB DEFINITIONS -------------------------------------------------------------
# Create the types of jobs we need to run.

<% if @backup_catalog -%>
# Backup the catalog database (after the nightly save)
Job {
  Name = "BackupCatalog"
  Type = Backup
  Client = <%= @director_server_real %>
  FileSet="Catalog"
  Schedule = "WeeklyCycleAfterBackup"
  Storage = "<%= @storage_server_real -%>:storage:default"
  Messages = "<%= @director_server_real -%>:messages:standard"
  Pool = "<%= @storage_server_real -%>:pool:catalog"
  # This creates an ASCII copy of the catalog
  RunBeforeJob = "<%= @scripts_dir -%>/make_catalog_backup.pl <%= director_server_real -%>:<%= db_backend -%>"
  # This deletes the copy of the catalog
  RunAfterJob  = "<%= @scripts_dir -%>/delete_catalog_backup"
  Write Bootstrap = "/var/lib/bacula/BackupCatalog.bsr"
  Maximum Concurrent Jobs = 20
  # Run after main backup
  Priority = 50
<% if @use_vol_purge_script -%>
# Run the volume purge script to clean up old file volumes
  RunScript {
    RunsWhen=After
    RunsOnClient=Yes
    Command = "<%= @purge_script_command %>"
    FailJobOnError=Yes
  }
<% end -%>
}
<% end -%>

# Create a standard profile for all normal servers
<%
  ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'].each do |onDay|
    ['noHome','withHome'].each do |doHome| -%>
JobDefs {
  Name = "Basic:<%= doHome -%>:on<%= onDay -%>"
  Type = Backup
  Level = Incremental
  FileSet = "Basic:<%= doHome -%>"
  Schedule = "Weekly:on<%= onDay -%>"
  Messages = "<%= @director_server_real -%>:messages:standard"
  # Set the job to work as standard with the default Pool & Storage
  # (this will be overridden by the Job configuration for each Client)
  Storage = "<%= @storage_server_real -%>:storage:default"
  Pool = "<%= @storage_server_real -%>:pool:default"
  Write Bootstrap = "/var/lib/bacula/%c.bsr"
  Priority = 15
  # Define how long any of these jobs are allowed to run for before we should
  # kill them. Note that this is the run time (how long the actual backup is
  # running for after starting, and not a maximum time after it was scheduled)
  Full Max Run Time = 36 Hours
  Differential Max Run Time = 6 Hours
  Incremental Max Run Time = 6 Hours
}
<%  end
  end -%>

# Finally, bring in all the additional pieces of configuration from the
# different servers for which this Director was configured to manage
@|"sh -c 'for f in /etc/bacula/bacula-dir.d/*.conf ; do echo @${f} ; done'"
